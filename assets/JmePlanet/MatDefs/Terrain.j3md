MaterialDef PlanetTerrain {

        // Parameters to material:
        // regionXColorMap: X = 1..4 the texture that should be appliad to state X
        // regionX: a Vector3f containing the following information:
        //      regionX.x: the start height of the region
        //      regionX.y: the end height of the region
        //      regionX.z: the texture scale for the region
        //  it might not be the most elegant way for storing these 3 values, but it packs the data nicely :)
	MaterialParameters {
		Texture2D Region1ColorMap
		Texture2D Region2ColorMap
		Texture2D Region3ColorMap
		Texture2D Region4ColorMap
                Texture2D SlopeColorMap
		Vector3 Region1
		Vector3 Region2
		Vector3 Region3
		Vector3 Region4

                // Used for height determination
                Vector3 PatchCenter
                Float PlanetRadius

                //shadows
                 Int FilterMode
                Boolean HardwareShadows
                Boolean BackfaceShadows
                Vector3 LightDir

                Texture2D ShadowMap0
                Texture2D ShadowMap1
                Texture2D ShadowMap2
                Texture2D ShadowMap3
                //pointLights
                Texture2D ShadowMap4
                Texture2D ShadowMap5

                Float ShadowIntensity
                Vector4 Splits
                Vector2 FadeInfo

                Matrix4 LightViewProjectionMatrix0
                Matrix4 LightViewProjectionMatrix1
                Matrix4 LightViewProjectionMatrix2
                Matrix4 LightViewProjectionMatrix3
                //pointLight
                Matrix4 LightViewProjectionMatrix4
                Matrix4 LightViewProjectionMatrix5   
                Vector3 LightPos

                Float PCFEdge
                Float ShadowMapSize
	}

	Technique {
                LightMode MultiPass
		VertexShader GLSL100:   JmePlanet/MatDefs/Terrain.vert
		FragmentShader GLSL100: JmePlanet/MatDefs/Terrain.frag

		WorldParameters {
			WorldViewProjectionMatrix
			WorldMatrix
			NormalMatrix
                        WorldViewMatrix
                        ViewMatrix
                        FrustumNearFar
		}

                RenderState {
                    FaceCull Off
                    DepthTest On
                    DepthWrite On
                }
	}

    Technique PreShadow {

        VertexShader GLSL100 :   Common/MatDefs/Shadow/PreShadow.vert
        FragmentShader GLSL100 : Common/MatDefs/Shadow/PreShadow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            FrustumNearFar
        }

        Defines {
            COLOR_MAP : ColorMap
            DISCARD_ALPHA : AlphaDiscardThreshold 
        }

        ForcedRenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 3
            ColorWrite Off
        }

    }

    Technique PostShadow15{
        VertexShader GLSL150:   Common/MatDefs/Shadow/PostShadow.vert
        FragmentShader GLSL150: Common/MatDefs/Shadow/PostShadow15.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold
            COLOR_MAP : ColorMap
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off                 
            PolyOffset -0.1 0
        }
    }

    Technique PostShadow{
        VertexShader GLSL100:   Common/MatDefs/Shadow/PostShadow.vert
        FragmentShader GLSL100: Common/MatDefs/Shadow/PostShadow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            FrustumNearFar
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold
            COLOR_MAP : ColorMap
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5     
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off   
            PolyOffset -0.1 0  
        }
    }

}
